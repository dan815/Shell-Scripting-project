#!/bin/bash

numArg=$#
inputFileName=$1

function mkDeleted() 
{	#makes deleted dir 
	if [ -d $HOME/deleted ] 
	then
		echo " $HOME/deleted Exists"
	else 
		echo "Making Dir"
		mkdir $HOME/deleted
	fi
}

function errCheck 
{ 	#Checks if number of args = 0
	if [ $numArg -eq 0 ] ; then
		echo "remove: missing operand"
		exit 9
	fi
	#checks if it is a directory
	if [ -d $inputFileName ] ; then
		echo "cannot remove '$inputFileName' : Is a directory"
		exit 10
	fi
	#checks if file exists
	if [ -e $inputFileName ] ; then
		if [ $(readlink -m $inputFileName) = $(readlink -m $HOME/remove) ] ; then
			echo "STOP TRYING TO REMOVE REMOVE"
			exit 12
		fi
	echo "File Found"	
	else
		echo "cannot remove '$inputFileName': No such file"
		exit 11
	fi
}

function mvFile
{ 	#moves the file to $HOME/deleted and renames it with inode, i.e. f1--> f1_1234
	echo "moving file to deleted..."
	absPath=$(readlink -m $inputFileName)
	inode=$(stat -c%i $absPath)
	fileName=$(basename $inputFileName)
	mv $inputFileName $HOME/deleted/$fileName"_"$inode
}

function updateRestoreFile
{	#checks for .restore file and logs the removed file
	if [ -e $HOME/.restore ] ; then
		echo ".restore file exists"
	else
		touch $HOME/.restore
	fi
	echo $fileName"_"$inode":"$absPath >> $HOME/.restore
}

function singleRemove {
	#Executes functions in order to: make delete bin > errCheck > mvFile > updateLog
	mkDeleted
	errCheck
	mvFile
	updateRestoreFile
}
#note that $* will be undefined if you put all this in another function
echo $*
arrHold=($*)
echo $varHold
varHold1=$1
#C=("${arrHold[@]:1}") #this slices array from 2nd arg
function multiRemove {
	#inital check for input
	errCheck
	for i in ${arrHold[@]}
		
	do
		inputFileName=$i
		singleRemove
	done
}

#function iMultiRemove {}
#function vMultiRemove {}
#function ivMultiRemove {}

multiRemove
